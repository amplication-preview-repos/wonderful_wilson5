/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Librarian as PrismaLibrarian,
  Library as PrismaLibrary,
} from "@prisma/client";

export class LibrarianServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibrarianCountArgs, "select">
  ): Promise<number> {
    return this.prisma.librarian.count(args);
  }

  async librarians(
    args: Prisma.LibrarianFindManyArgs
  ): Promise<PrismaLibrarian[]> {
    return this.prisma.librarian.findMany(args);
  }
  async librarian(
    args: Prisma.LibrarianFindUniqueArgs
  ): Promise<PrismaLibrarian | null> {
    return this.prisma.librarian.findUnique(args);
  }
  async createLibrarian(
    args: Prisma.LibrarianCreateArgs
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.create(args);
  }
  async updateLibrarian(
    args: Prisma.LibrarianUpdateArgs
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.update(args);
  }
  async deleteLibrarian(
    args: Prisma.LibrarianDeleteArgs
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.delete(args);
  }

  async getLibrary(parentId: string): Promise<PrismaLibrary | null> {
    return this.prisma.librarian
      .findUnique({
        where: { id: parentId },
      })
      .library();
  }
}
