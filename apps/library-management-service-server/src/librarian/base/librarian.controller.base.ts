/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibrarianService } from "../librarian.service";
import { LibrarianCreateInput } from "./LibrarianCreateInput";
import { Librarian } from "./Librarian";
import { LibrarianFindManyArgs } from "./LibrarianFindManyArgs";
import { LibrarianWhereUniqueInput } from "./LibrarianWhereUniqueInput";
import { LibrarianUpdateInput } from "./LibrarianUpdateInput";

export class LibrarianControllerBase {
  constructor(protected readonly service: LibrarianService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Librarian })
  async createLibrarian(
    @common.Body() data: LibrarianCreateInput
  ): Promise<Librarian> {
    return await this.service.createLibrarian({
      data: {
        ...data,

        library: data.library
          ? {
              connect: data.library,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        library: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Librarian] })
  @ApiNestedQuery(LibrarianFindManyArgs)
  async librarians(@common.Req() request: Request): Promise<Librarian[]> {
    const args = plainToClass(LibrarianFindManyArgs, request.query);
    return this.service.librarians({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        library: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Librarian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async librarian(
    @common.Param() params: LibrarianWhereUniqueInput
  ): Promise<Librarian | null> {
    const result = await this.service.librarian({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        library: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Librarian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibrarian(
    @common.Param() params: LibrarianWhereUniqueInput,
    @common.Body() data: LibrarianUpdateInput
  ): Promise<Librarian | null> {
    try {
      return await this.service.updateLibrarian({
        where: params,
        data: {
          ...data,

          library: data.library
            ? {
                connect: data.library,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          name: true,

          library: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Librarian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibrarian(
    @common.Param() params: LibrarianWhereUniqueInput
  ): Promise<Librarian | null> {
    try {
      return await this.service.deleteLibrarian({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          name: true,

          library: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
