/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Book as PrismaBook,
  Loan as PrismaLoan,
  Category as PrismaCategory,
  Library as PrismaLibrary,
} from "@prisma/client";

export class BookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BookCountArgs, "select">): Promise<number> {
    return this.prisma.book.count(args);
  }

  async books(args: Prisma.BookFindManyArgs): Promise<PrismaBook[]> {
    return this.prisma.book.findMany(args);
  }
  async book(args: Prisma.BookFindUniqueArgs): Promise<PrismaBook | null> {
    return this.prisma.book.findUnique(args);
  }
  async createBook(args: Prisma.BookCreateArgs): Promise<PrismaBook> {
    return this.prisma.book.create(args);
  }
  async updateBook(args: Prisma.BookUpdateArgs): Promise<PrismaBook> {
    return this.prisma.book.update(args);
  }
  async deleteBook(args: Prisma.BookDeleteArgs): Promise<PrismaBook> {
    return this.prisma.book.delete(args);
  }

  async findLoans(
    parentId: string,
    args: Prisma.LoanFindManyArgs
  ): Promise<PrismaLoan[]> {
    return this.prisma.book
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loans(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.book
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getLibrary(parentId: string): Promise<PrismaLibrary | null> {
    return this.prisma.book
      .findUnique({
        where: { id: parentId },
      })
      .library();
  }
}
